<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE model [
  <!ELEMENT model (query_text, model_path, output_type, parameters?, orders?, columns?)>
  <!ATTLIST model code CDATA "">
  <!ATTLIST model description CDATA "">
  <!ELEMENT query_text (#PCDATA)>
  <!ELEMENT output_type (#PCDATA)>
  <!ELEMENT database_request (#PCDATA)>
  <!ELEMENT model_path (#PCDATA)>
  <!ELEMENT parameters (parameter*)>
  <!ELEMENT parameter (expression, param_type, param_sub_type, widget?, str_options?, query_options?)>
  <!ATTLIST parameter code CDATA "">
  <!ATTLIST parameter description CDATA "">
  <!ATTLIST parameter mandatory (true|false) #REQUIRED>
  <!ELEMENT widget (#PCDATA)>
  <!ELEMENT str_options (#PCDATA)>
  <!ELEMENT query_options (#PCDATA)>
  <!ELEMENT param_sub_type (#PCDATA)>  <!ELEMENT param_type (#PCDATA)>  <!ELEMENT expression (#PCDATA)>  <!ELEMENT orders (order*)>
  <!ATTLIST order description CDATA "">
  <!ATTLIST order fields CDATA "">
  <!ELEMENT columns (column*)>
  <!ATTLIST order title CDATA "">
  <!ATTLIST order width CDATA "">
]>

<model code="DLL_CRT_TRIGGERS" description="Create Trigger">
    <parameters>
        <parameter code="p_schema" description="Schema" mandatory="true">
            <expression><![CDATA[AND n.nspname = ?]]></expression>
            <param_type><![CDATA[Text]]></param_type>
            <param_sub_type><![CDATA[Single]]></param_sub_type>
        </parameter>
        <parameter code="p_table" description="Table Name " mandatory="true">
            <expression><![CDATA[AND tbl.relname = ? ]]></expression>
            <param_type><![CDATA[Text]]></param_type>
            <param_sub_type><![CDATA[Single]]></param_sub_type>
        </parameter>
    </parameters>
    <orders/>
    <columns/>
    <query_text><![CDATA[WITH
triggers as (
    SELECT trg.tgname AS trigger_name,
           n.nspname || '.' || tbl.relname AS table_name,
           p.proname AS function_name,
           CASE trg.tgtype & cast(2 as int2)
             WHEN 0 THEN 'AFTER'
             ELSE 'BEFORE'
           END AS trigger_type,
           CASE trg.tgtype & cast(28 as int2)
             WHEN 16 THEN 'UPDATE'
             WHEN  8 THEN 'DELETE'
             WHEN  4 THEN 'INSERT'
             WHEN 20 THEN 'INSERT OR UPDATE'
             WHEN 28 THEN 'INSERT OR UPDATE OR DELETE'
             WHEN 24 THEN 'UPDATE OR DELETE'
             WHEN 12 THEN 'INSERT OR DELETE'
           END AS trigger_event,
           CASE trg.tgtype & cast(1 as int2)
             WHEN 0 THEN 'FOR EACH STATEMENT'
             ELSE 'FOR EACH ROW'
           END AS action_orientation, 
           CASE trg.tgdeferrable 
             WHEN TRUE THEN 'DEFERRABLE'
             ELSE 'NOT DEFERRABLE'
           END is_deferrable, 
           CASE trg.tginitdeferred 
             WHEN TRUE THEN 'INITIALLY DEFERRED'
             ELSE ''
           END is_initially_deferred
      FROM pg_trigger trg,
           pg_class tbl,
           pg_namespace n, 
           pg_proc p
     WHERE trg.tgrelid = tbl.oid
       AND n.oid = tbl.relnamespace
       AND trg.tgfoid = p.oid
       AND tbl.relname !~ '^pg_'
       AND trg.tgisinternal = FALSE
       [!p_schema!]
       [!p_table!]
    )   
    SELECT 
        'CREATE TRIGGER ' || t.trigger_name || E'\n    ' || 
        t.trigger_type || ' ' || t.trigger_event || E'\n' ||
        '    ON ' || t.table_name || E'\n' || 
        '    ' || t.is_deferrable || ' ' || t.is_initially_deferred || E'\n' ||
        '    ' || t.action_orientation || E'\n' || 
        '    EXECUTE PROCEDURE ' || t.function_name AS create_trigger
    FROM triggers t]]></query_text>
    <database_request><![CDATA[yes]]></database_request>
    <output_type><![CDATA[Text Without Separators]]></output_type>
    <model_path><![CDATA[/triggers]]></model_path>
</model>